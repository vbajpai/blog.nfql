<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>NFQL</title>
 <link href="http://vbajpai.github.com/blog.nfql/atom.xml" rel="self"/>
 <link href="http://vbajpai.github.com/blog.nfql"/>
 <updated>2012-09-22T20:37:19+02:00</updated>
 <id>http://vbajpai.github.com/blog.nfql</id>
 <author>
   <name>Vaibhav Bajpai</name>
   <email>contact@vaibhavbajpai.com</email>
 </author>

 
 <entry>
   <title>Resolved Grouper Segfaults</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/03/12/resolved-grouper-segfaults"/>
   <updated>2012-03-12T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/03/12/resolved-grouper-segfaults</id>
   <content type="html">&lt;p&gt;Removed GNU99 extensions to increase portability&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replaced &lt;code&gt;Boolean enum&lt;/code&gt; with &lt;code&gt;C99 bool&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;Removed Anonymous Unions&lt;/li&gt;

&lt;li&gt;Added a &lt;code&gt;C99&lt;/code&gt; flag in the Makefile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order of arguments passed in &lt;code&gt;qsort_r(…)&lt;/code&gt; and &lt;code&gt;bsearch_r(…)&lt;/code&gt; was incorrect. This could also be due to the different order of arguments in &lt;code&gt;glibc&lt;/code&gt; and &lt;code&gt;BSD&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void 
qsort_r(
        void *base, size_t nel, 
        size_t width, 
        void *thunk, 
        int (*compar)(void *, const void *, const void *)
       );
		
void *
bsearch_r(
          const void *key, 
          const void *base, 
          size_t nel, 
          size_t width, 
          void *thunk, 
          int (*compar) (const void *, const void *)
         );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Removed the &lt;code&gt;--absolute&lt;/code&gt; switch. This should be implied from the supplied query.&lt;/p&gt;

&lt;p&gt;Pretty Printing each sub stage of the grouper pipeline.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;printing the sorted filtered records on &lt;code&gt;--debug&lt;/code&gt;. The records are sorted to the first rule in the grouper module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grouper g_www_req {
   module g1 {
      srcip = srcip
	  ...
   }	  
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then the filtered records are sorted according to the &lt;code&gt;srcip&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine]$ ./flowy-engine --debug traces-long.ft query.json

No. of Sorted Records: 166

...	SrcIPaddress    ...

...	4.23.48.126     ...
...	4.23.48.126     ...
...	4.23.48.126     ...
...	8.12.214.126    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;printing the unique sorted records on &lt;code&gt;--debug&lt;/code&gt;. The duplicate sorted records are filtered out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No. of Unique Records: 32

...	SrcIPaddress    ...

...	4.23.48.126     ...
...	8.12.214.126    ... &lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;printing the formed groups on &lt;code&gt;--debug&lt;/code&gt;. The example shows groups formed with records having the same &lt;code&gt;srcIP&lt;/code&gt; and &lt;code&gt;dstIP&lt;/code&gt; and having &lt;code&gt;srcP 80&lt;/code&gt; (which was the rule in the filter stage)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No. of Groups: 32 (Verbose Output)

...	SrcIPaddress    SrcP  DIf   DstIPaddress   ...

...	4.23.48.126     80    0     192.168.0.135  ...
...	4.23.48.126     80    0     192.168.0.135  ...

...	8.12.214.126    80    0     192.168.0.135  ...
...	8.12.214.126    80    0     192.168.0.135  ...&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>New Grouper Features</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/03/12/new-grouper-features"/>
   <updated>2012-03-12T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/03/12/new-grouper-features</id>
   <content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pretty printing group aggregations as new flow record representatives. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grouper g_www_res {
   module g1 {
      srcip = srcip
      dstip = dstip
   }
   aggregate srcip, dstip, sum(bytes) as bytes, bitOR(tcp_flags) as flags, 
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will form groups with same &lt;code&gt;srcIP&lt;/code&gt; and &lt;code&gt;dstIP&lt;/code&gt; and display as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No. of Groups: 32 (Aggregations)

...	   SrcIPaddress    ...	  	DstIPaddress      OR(Fl)    Sum(Octets)

...	   4.23.48.126     ...  	192.168.0.135     3         81034
...	   8.12.214.126    ...  	192.168.0.135     2         5065
...	   80.157.170.88   ...  	192.168.0.135     6         18025&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea is to return aggregates, common fields and sets of uncommon fields.&lt;br /&gt;The feature to return set of uncommon fields still needs to be implemented.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;There can be a situtation as in the example above, where the query designer might incorrectly ask for aggregation on a field already specified in a grouper module. Of course, the aggregation does not make any sense, since the grouped record will always have the same value for that field. The engine is now smart to realize it and ignores such aggregations as above.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Records are clubbed together into one group if no group modules are defined&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grouper g_www_res {
   module g1 {}
   aggregate sum(bytes) as bytes
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously such a query would form groups for each individual filtered record. That was less useful since then one could not just perform meaningful aggregates (as above). Now, when the group modules are empty, all the filtered records are clubbed into one group to allow such aggregations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No. of Groups: 1 (Aggregations)

...    Sum(Octets)
...    2356654&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Preliminary JSON Parsing Experimentation</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/03/01/preliminary-json-parsing-experimentation"/>
   <updated>2012-03-01T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/03/01/preliminary-json-parsing-experimentation</id>
   <content type="html">&lt;p&gt;Preliminary JSON parsing experimentation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;added filter comparison functions in &lt;code&gt;auto_assign.c&lt;/code&gt; using &lt;code&gt;fun_gen.py&lt;/code&gt; (1, 2)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;using the new comparison functions in the &lt;code&gt;filter_rule&lt;/code&gt; struct (3)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;added a temporary &lt;code&gt;filter-poop.py&lt;/code&gt; to spit out JSON representation of a python object using the &lt;code&gt;json&lt;/code&gt; module (4, 5)&lt;/p&gt;

&lt;p&gt;where the python class is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class FilterStatement: 		  
  def __init__(self, name, value, datatype, delta, op):
    self.offset = {
      &amp;#39;name&amp;#39;: name,
      &amp;#39;value&amp;#39;: value,
      &amp;#39;datatype&amp;#39;: datatype
    }		    
    self.delta = delta
    self.op = op		&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;executing the python file gives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python filter-poop.py
{
  &amp;quot;delta&amp;quot;: 0, 
  &amp;quot;op&amp;quot;: &amp;quot;RULE_EQ&amp;quot;, 
  &amp;quot;offset&amp;quot;: {
    &amp;quot;datatype&amp;quot;: &amp;quot;u_int16&amp;quot;, 
    &amp;quot;name&amp;quot;: &amp;quot;dstport&amp;quot;, 
    &amp;quot;value&amp;quot;: 80
  }
} 		    &lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The execution engine can now parse this JSON file to read the parameters for the filter stage (for now) (3, 6)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./flowy-engine --absolute traces.ft query.json

No. of Filtered Records: 4

...	SrcIPaddress    SrcP  DIf   DstIPaddress    DstP  ...
...	10.50.239.4     39788 0     209.85.135.19   80    ...
...	10.50.239.4     40339 0     81.19.80.14     80    ...
...	10.50.239.4     46499 0     209.85.135.19   80    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources -&lt;/p&gt;

&lt;p&gt;(1) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/auto__assign_8c.html'&gt;&lt;code&gt;auto_assign&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(2) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/fun__gen_8py.html'&gt;&lt;code&gt;fun_gen&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(3) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/flowy_8c.html'&gt;&lt;code&gt;flowy&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(4) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/namespacefilter-poop.html'&gt;&lt;code&gt;filter-poop&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;External Resources -&lt;/p&gt;

&lt;p&gt;(5) &lt;a href='http://docs.python.org/library/json.html'&gt;&lt;code&gt;python json module&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(6) &lt;a href='http://oss.metaparadigm.com/json-c/'&gt;&lt;code&gt;json-c library&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Debugging the Execution Engine</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/27/debugging-the-execution-engine"/>
   <updated>2012-02-27T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/27/debugging-the-execution-engine</id>
   <content type="html">&lt;p&gt;Debugging the execution engine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added a &lt;s&gt;`DEBUGENGINE` macro&lt;/s&gt; &lt;code&gt;debug bool&lt;/code&gt; in &lt;code&gt;base_header.h&lt;/code&gt; (1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Changes in &lt;code&gt;ftreader&lt;/code&gt; (2)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;ftio_check_xfield(…)&lt;/code&gt; to check the proper format before retrieving the xfield using &lt;code&gt;ftio_xfield(…)&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;Added &lt;code&gt;flow_print_record(…)&lt;/code&gt; to print the flow-records.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;ftreader&lt;/code&gt; now prints the read trace in a &lt;code&gt;flow-print-f5&lt;/code&gt; format when &lt;code&gt;DEBUGENGINE&lt;/code&gt; is set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Changes in &lt;code&gt;pipeline&lt;/code&gt; (3)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Saving pointers to the filtered records when &lt;code&gt;DEBUGENGINE&lt;/code&gt; is set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct branch_info {
  
  /* have to be filled manually */
  ...
  
#ifdef DEBUGENGINE
  char** filtered_records;
  size_t num_filtered_records;  
#endif
  
  /* will be filled by individual branches */
  ...
};&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Changes in &lt;code&gt;flowy&lt;/code&gt; (4)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added a bunch load of code comments to describe the flow.&lt;/li&gt;

&lt;li&gt;Added separate macros for each stage of the pipeline for now, until the segfault is resolved.&lt;/li&gt;

&lt;li&gt;Printing the filtered flow-records when the &lt;s&gt;`DEBUGENGINE`&lt;/s&gt; &lt;code&gt;--debug&lt;/code&gt; is set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources -&lt;/p&gt;

&lt;p&gt;(1) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/base__header_8h.html'&gt;&lt;code&gt;base_header&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(2) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/ftreader_8c.html'&gt;&lt;code&gt;ftreader&lt;/code&gt; reference &amp;#8594;&lt;/a&gt; &lt;br /&gt;(3) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/pipeline_8h.html'&gt;&lt;code&gt;pipeline&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(4) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/flowy_8c.html'&gt;&lt;code&gt;flowy&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Command Line Parsing of the Execution Engine</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/27/command-line-parsing-of-the-execution-engine"/>
   <updated>2012-02-27T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/27/command-line-parsing-of-the-execution-engine</id>
   <content type="html">&lt;p&gt;Command Line Parsing of the Execution Engine&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Renamed &lt;code&gt;base_header.h&lt;/code&gt; to &lt;code&gt;base.{h,c}&lt;/code&gt; (1)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Defined global variables (command line flags) used in &lt;code&gt;base.{h,c}&lt;/code&gt; (1)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Moved &lt;code&gt;usageError(…)&lt;/code&gt; to &lt;code&gt;error_functions&lt;/code&gt; (2)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;using &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;absolute&lt;/code&gt; global flags now instead of macros (3)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;using &lt;code&gt;getopt_long(…)&lt;/code&gt; for command line parsing (3)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;print usage on insufficient arguments&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine]$ ./flowy-engine
Usage: ./flowy-engine $TRACE&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;track invalid options&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine]$ ./flowy-engine -x traces.ft
flowy-engine: invalid option -- x&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;--debug&lt;/code&gt; flag: &lt;code&gt;flow-print&lt;/code&gt; functionality&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine]$ ./flowy-engine --debug traces.ft
 #
 # mode:                 normal
 # capture hostname:     melnikovkolya-laptop
 # capture start:        (null)  
 # capture end:          Mon Feb 12 18:29:48 2418
 # capture period:       299 seconds
 # compress:             on
 # byte order:           little
 # stream version:       3
 # export version:       5
 # lost flows:           0
 # corrupt packets:      0
 # sequencer resets:     0
 # capture flows:        132
 #

... SrcIPaddress    SrcP  DIf   DstIPaddress    DstP  ...

... 10.50.249.229   138   0     10.50.255.255   138   ...
... 10.50.223.240   138   0     10.50.255.255   138   ...&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;&lt;s&gt;`--absolute` flag: can be used to restrict functionality&lt;/s&gt;
&lt;pre&gt;&lt;code&gt;[engine]$ ./flowy-engine --absolute traces.ft

No. of Filtered Records: 4

...	SrcIPaddress    SrcP  DIf   DstIPaddress    DstP  ...

...	10.50.239.4     39788 0     209.85.135.19   80    ...
...	10.50.239.4     40339 0     81.19.80.14     80    ...
...	10.50.239.4     46499 0     209.85.135.19   80    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources -&lt;/p&gt;

&lt;p&gt;(1) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/base_8h.html'&gt;&lt;code&gt;base&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(2) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/error__functions_8h.html'&gt;&lt;code&gt;error_functions&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(3) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/flowy_8c.html'&gt;&lt;code&gt;flowy&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;br /&gt;(4) &lt;a href='http://mthesis.vaibhavbajpai.com/post/19179727822/resolved-grouper-segfaults'&gt;resolved grouper segfaults &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Refactoring the Execution Engine</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/24/refactoring-the-execution-engine"/>
   <updated>2012-02-24T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/24/refactoring-the-execution-engine</id>
   <content type="html">&lt;p&gt;Refactoring the execution engine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added a &lt;s&gt;`base_header`&lt;/s&gt; &lt;code&gt;base&lt;/code&gt; for common lib includes (1).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt='base-header' src='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/base_8h__incl.png' /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;error_functions&lt;/code&gt; for common error reporting, currently being used by &lt;code&gt;flowy&lt;/code&gt; (2).&lt;/li&gt;

&lt;li&gt;Indented the whole project to use 2 spaces for a tab.&lt;/li&gt;

&lt;li&gt;Added &lt;code&gt;grouper_fptr, merger_fptr&lt;/code&gt; headers (why were they missing again :-/) for the corresponding sources (3, 4).&lt;/li&gt;

&lt;li&gt;Added more details in the Doxygen documentation, added documentation for &lt;code&gt;ftlib&lt;/code&gt; (5).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt='flow-query' src='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/structflowquery__coll__graph.png' /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Moved all external lib includes in the header for consistency, added include-guards in few missed headers.&lt;/li&gt;

&lt;li&gt;Separated out pipeline structs in &lt;code&gt;pipeline&lt;/code&gt; header to resolve circular dependencies to avoid forward declarations (6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt='pipeline' src='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/pipeline_8h__dep__incl.png' /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updated &lt;code&gt;fun_gen&lt;/code&gt; to reflect aforementioned resolution of circular dependencies (7)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources -&lt;/p&gt;

&lt;p&gt;(1) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/base__header_8h.html'&gt;&lt;code&gt;base_header&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(2) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/error__functions_8h.html'&gt;&lt;code&gt;error_functions&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(3) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/merger__fptr_8h.html'&gt;&lt;code&gt;merger_fptr&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(4) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/grouper__fptr_8h.html'&gt;&lt;code&gt;grouper_fptr&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(5) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/ftlib_8h.html'&gt;&lt;code&gt;ftlib&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(6) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/pipeline_8h.html'&gt;&lt;code&gt;pipeline&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(7) &lt;a href='http://dl.dropbox.com/u/500389/mthesis/docs-engine/html/namespacefun__gen.html'&gt;&lt;code&gt;fun_gen&lt;/code&gt; reference &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Execution Engine currently segfaults</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/23/the-execution-engine-currently-segfaults"/>
   <updated>2012-02-23T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/23/the-execution-engine-currently-segfaults</id>
   <content type="html">&lt;p&gt;&lt;img alt='Imgur' src='http://i.imgur.com/qiyVa.png' /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cflow --format=posix --omit-arguments flowy.c
    1 main: int (), &amp;lt;flowy.c 200&amp;gt;
    6     ft_open: &amp;lt;&amp;gt;
   14     branch_start: void * (), &amp;lt;flowy.c 146&amp;gt;
   15         filter: char ** (), &amp;lt;flowy.c 57&amp;gt;
   22         grouper: &amp;lt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So essentially the &lt;code&gt;build_record_trees(…)&lt;/code&gt; function segfaults when it calls &lt;code&gt;qsort_r(…)&lt;/code&gt;. Need to investigate on it &amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Removing Extraneous Files from the Execution Engine</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/23/removing-extraneous-files-from-the-execution-engine"/>
   <updated>2012-02-23T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/23/removing-extraneous-files-from-the-execution-engine</id>
   <content type="html">&lt;p&gt;The engine currently uses comparison functions as the default method for efficient rule processing. These functions are auto-generated by &lt;code&gt;fun_gen.py&lt;/code&gt; to &lt;code&gt;auto_comps.{h,c}&lt;/code&gt; and later called by &lt;code&gt;grouper_fptr.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same python script also generates &lt;code&gt;auto_switch.c&lt;/code&gt; as an alternative method which can be later called by &lt;code&gt;grouper_switch.c&lt;/code&gt;. Since, this method is not currently used by the program. I have removed it from the &lt;code&gt;HEAD&lt;/code&gt; since it can anyway be later retrieved from the &lt;code&gt;git&lt;/code&gt; history.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine] $ rm auto_switch.c grouper_switch.c&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The engine also performs a divide and conquer approach for fast relative comparsions. The code was initially prepared as a separate compilation unit for testing purposes and was later incorporated into the engine. The separate units are therefore no longer needed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine] $ rm treesearch.c treesearchmain.c&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; stage of the processing pipeline was moved out into a separate compilation unit to allow benchmarking with contemporary tools like &lt;code&gt;flow-tools&lt;/code&gt; and &lt;code&gt;nf-dump&lt;/code&gt;. This should be done by passing an &lt;code&gt;--absolute&lt;/code&gt; switch to the engine, which reduces its functionality down to only the &lt;code&gt;filter&lt;/code&gt; stage. As such, I am removing the separate units.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine] $ rm filter.c&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The references to these units were also removed from the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Installing and Running the Execution Engine</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/23/installing-and-running-the-execution-engine"/>
   <updated>2012-02-23T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/23/installing-and-running-the-execution-engine</id>
   <content type="html">&lt;p&gt;Install &lt;code&gt;flow-tools&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For 32-bit machines, go ahead, but for &lt;code&gt;AMD64&lt;/code&gt; follow (1)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install https://raw.github.com/hoxworth/homebrew/25921d95ff10d1b505e933a581e0b4fb8d72d952/Library/Formula/flow-tools.rb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Building on the command line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine] $ make&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Building using Xcode&lt;/p&gt;

&lt;p&gt;&lt;img alt='Imgur' src='http://i.imgur.com/NrB3s.png' /&gt;&lt;/p&gt;

&lt;p&gt;Running on the command line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine] $ ./flowy-engine --help
[engine] $ ./flowy-engine $TRACE&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running using Xcode&lt;/p&gt;

&lt;p&gt;Goto Product &amp;#8594; Edit Scheme to Arguments.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Imgur' src='http://i.imgur.com/vRdSN.png' /&gt;&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;(1) &lt;a href='http://mthesis.vaibhavbajpai.com/post/19183305904/flow-tools-on-amd64'&gt;&lt;code&gt;flow-tools&lt;/code&gt; on &lt;code&gt;AMD64&lt;/code&gt; &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Reverse Engineering the C Execution Engine</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/22/reverse-engineering-the-c-execution-engine"/>
   <updated>2012-02-22T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/22/reverse-engineering-the-c-execution-engine</id>
   <content type="html">&lt;p&gt;Install Doxygen&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install doxygen&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initialize Doxygen&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine] $ doxygen -g&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the Doxyfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[...]

# Extract documentation even from those elements you haven&amp;#39;t yet commented.
EXTRACT_ALL = YES	

# Extract the relevant parts of the source and associate them with your description.
INLINE_SOURCE = YES

# Use GraphVIZ for class and collaboration diagrams.
HAVE_DOT = YES

# Generate a dependency graph for functions and methods.
CALL_GRAPH = YES

# Skip generating LaTeX sources for PDF.
GENERATE_LATEX = NO

# Show directory hierarchy in the documentation
SHOW_DIRECTORIES = YES

# Recursively search for input files.
RECURSIVE = YES&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute Doxygen&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[engine] $ doxygen Doxyfile&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;flowy.c&lt;/code&gt; Dependency Graph&lt;/p&gt;

&lt;p&gt;&lt;img alt='Imgur' src='http://i.imgur.com/QXVy4.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flowy.c&lt;/code&gt; &amp;#8594; &lt;code&gt;main(…)&lt;/code&gt; Call Graph&lt;/p&gt;

&lt;p&gt;&lt;img alt='Imgur' src='http://i.imgur.com/uEOVw.png' /&gt;&lt;/p&gt;

&lt;p&gt;A similar Call Graph can also be generated using &lt;code&gt;cflow&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install cflow

$ cflow --format=posix --omit-arguments flowy.c
    1 main: int (), &amp;lt;flowy.c 204&amp;gt;
    2     ft_open: &amp;lt;&amp;gt;
    3     calloc: &amp;lt;&amp;gt;
    4     perror: &amp;lt;&amp;gt;
    5     exit: &amp;lt;&amp;gt;
    6     assign_fptr: &amp;lt;&amp;gt;
    7     malloc: &amp;lt;&amp;gt;
    8     pthread_attr_init: &amp;lt;&amp;gt;
    9     pthread_create: &amp;lt;&amp;gt;
   10     branch_start: void * (), &amp;lt;flowy.c 149&amp;gt;
   11         filter: char ** (), &amp;lt;flowy.c 58&amp;gt;
   12             malloc: &amp;lt;&amp;gt;
   13             perror: &amp;lt;&amp;gt;
   14             exit: &amp;lt;&amp;gt;
   15             func: &amp;lt;&amp;gt;
   16             realloc: &amp;lt;&amp;gt;
   17         printf: &amp;lt;&amp;gt;
   18         grouper: &amp;lt;&amp;gt;
   19         free: &amp;lt;&amp;gt;
   20         group_filter: struct group (), &amp;lt;flowy.c 92&amp;gt;
   21         perror: &amp;lt;&amp;gt;
   22         exit: &amp;lt;&amp;gt;
   23         pthread_exit: &amp;lt;&amp;gt;
   24     pthread_attr_destroy: &amp;lt;&amp;gt;
   25     pthread_join: &amp;lt;&amp;gt;
   26     printf: &amp;lt;&amp;gt;
   27     free: &amp;lt;&amp;gt;
   28     merger: &amp;lt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;struct flowquery&lt;/code&gt; Collaboration Graph&lt;/p&gt;

&lt;p&gt;&lt;img alt='Imgur' src='http://i.imgur.com/tj99w.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.vaibhavbajpai.com/documents/thesis/docs/docs-engine/html/index.html'&gt;Complete Documentation &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Reverse Engineering the Python Parser</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/21/reverse-engineering-the-python-parser"/>
   <updated>2012-02-21T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/21/reverse-engineering-the-python-parser</id>
   <content type="html">&lt;p&gt;Install GraphVIZ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install graphviz
$ brew linkapps&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install PyLint&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install pylint&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate UML Diagrams using PyReverse&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyreverse -o png -p parser parser/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UML Diagram of the Python Parser&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.vaibhavbajpai.com/documents/thesis/docs/docs-parser/packages-parser.png'&gt;Packages &amp;#8594;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.vaibhavbajpai.com/documents/thesis/docs/docs-parser/classes-parser.png'&gt;Classes &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Installing and Running the Parser</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/21/installing-and-running-the-parser"/>
   <updated>2012-02-21T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/21/installing-and-running-the-parser</id>
   <content type="html">&lt;p&gt;Install PyTables&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hdf5
$ brew install lzo

$ pip install numpy
$ pip install numexpr
$ pip install cython&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Python Lex &amp;amp; Yacc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install ply==2.5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install &lt;code&gt;pyflowtools&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install https://raw.github.com/hoxworth/homebrew/25921d95ff10d1b505e933a581e0b4fb8d72d952/Library/Formula/flow-tools.rb
$ pip install git+https://git.gitorious.org/flow-tools/pyflowtools.git&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Misc Dependencies&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install netaddr&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Freeze&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip freeze  
Cython==0.15.1
distribute==0.6.24
logilab-astng==0.23.1
logilab-common==0.57.1
netaddr==0.7.6
numexpr==2.0.1
numpy==1.6.1
ply==2.5
pyflowtools==0.3.4.1
pylint==0.25.1
tables==2.3.1
wsgiref==0.1.2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test Run Flowy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[parser] $ python ft2hdf.py ../../traces/ ft-traces.h5
[parser] $ python printhdf.py ft-traces.h5
[parser] $ python print_hdf_in_step.py ft-traces.h5
[parser] $ python flowy.py query.flw&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;query.flw&lt;/code&gt; refers to the input &lt;code&gt;ft-traces.h5&lt;/code&gt; and the to-be created &lt;code&gt;output.h5&lt;/code&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>v2.0: it's a start</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/20/v20-its-a-start"/>
   <updated>2012-02-20T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/20/v20-its-a-start</id>
   <content type="html">&lt;p&gt;The evolution of the core of the former Python implementation in C.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; git show v0.0

tag v0.0
Tagger: Vaibhav Bajpai &amp;lt;contact@vaibhavbajpai.com&amp;gt;
Date:   Thu May 17 10:48:02 2012 +0200
Commit 8cb309c8a956c99e6b1494eddb601c8f6a520696

* read flow-records into memory
* rewrite of the execution pipeline in C (non functional)
* efficient rule processing with dedicated function pointers
* reduced grouper complexity using qsort(...) and bsearch(...)
* concerns
        - flow query is currently hardcoded in pipeline structs
        - functions assume specific uintX_t offsets
        - numerous grouper segfaults
        - no group filter
        - commented out merger (segfaults when uncommented)
        - no ungrouper
        - code dependent on GNU99 extensions
        - some headers are missing include guards
        - unused extraneous source files and headers&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Github Repositories</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/20/github-repositories"/>
   <updated>2012-02-20T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/20/github-repositories</id>
   <content type="html">&lt;p&gt;&lt;a href='https://github.com/vbajpai/nfql'&gt;NFQL Repository &amp;#8594;&lt;/a&gt;&lt;br /&gt;&lt;a href='https://github.com/vbajpai/mastersthesis'&gt;Thesis Repository &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Masters Thesis Proposal</title>
   <link href="http://vbajpai.github.com/blog.nfql/2012/02/01/masters-thesis-proposal"/>
   <updated>2012-02-01T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2012/02/01/masters-thesis-proposal</id>
   <content type="html">&lt;p&gt;I submitted my thesis proposal today.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/downloads/vbajpai/blog.nfql/vbajpai-proposal.pdf'&gt;Masters Thesis Proposal &amp;#8594;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>State of the Art</title>
   <link href="http://vbajpai.github.com/blog.nfql/2011/12/25/state-of-the-art"/>
   <updated>2011-12-25T00:00:00+01:00</updated>
   <id>http://vbajpai.github.com/blog.nfql/2011/12/25/state-of-the-art</id>
   <content type="html">&lt;p&gt;&lt;a href='http://dl.dropbox.com/u/500389/mthesis/f.pdf'&gt;F &amp;#8594;&lt;/a&gt;&lt;br /&gt;Johannes Schauer, Nikolay Melnikov, Jürgen Schönwälder&lt;br /&gt;December 2011.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://dl.dropbox.com/u/500389/mthesis/ipv6transeval.pdf'&gt;Automated Failure Identification under IPv6 Transition Mechanisms &amp;#8594;&lt;/a&gt;&lt;br /&gt;Vaibhav Bajpai, Nikolay Melnikov, Jürgen Schönwälder&lt;br /&gt;December 2011&lt;/p&gt;

&lt;p&gt;&lt;a href='http://dl.dropbox.com/u/500389/mthesis/jschauer-thesis.pdf'&gt;Flowy 2.0: Fast Execution of Stream-based IP Flow Queries &amp;#8594;&lt;/a&gt;&lt;br /&gt;Johannes Schauer, Bachelors Thesis, May 2011.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5990668'&gt;Flow signatures of popular applications &amp;#8594;&lt;/a&gt;&lt;br /&gt;&lt;a href='http://cnds.eecs.jacobs-university.de/slides/2011-im-flow-signatures.pdf'&gt;Slides &amp;#8594;&lt;/a&gt;&lt;br /&gt;Vladislav Perelman, Nikolay Melnikov, Jürgen Schönwälder&lt;br /&gt;IM 2011, Dublin, May 2011.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://svn.eecs.jacobs-university.de/svn/eecs/archive/msc-2010/nmelnikov.pdf'&gt;Cybermetrics: Identication of Users Through Network Flow Analysis &amp;#8594;&lt;/a&gt;&lt;br /&gt;Nikolay Melnikov, Masters Thesis, August 2010.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://cnds.eecs.jacobs-university.de/slides/2010-ietf-78-nmrg-app-signatures.pdf'&gt;Flow Signatures of Popular Applications &amp;#8594;&lt;/a&gt;&lt;br /&gt;Nikolay Melnikov&lt;br /&gt;78th IETF, Maastricht, July 2010.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.springerlink.com/content/l85hk73487086024/fulltext.pdf'&gt;Cybermetrics: User Identiﬁcation through Network Flow Analysis &amp;#8594;&lt;/a&gt;&lt;br /&gt;&lt;a href='http://cnds.eecs.jacobs-university.de/slides/2010-aims-cybermetrics.pdf'&gt;Slides &amp;#8594;&lt;/a&gt;&lt;br /&gt;Nikolay Melnikov, Jürgen Schönwälder AIMS 2010, Zurich, June 2010.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.springerlink.com/content/a565783288655j67/fulltext.pdf'&gt;Implementation of a Stream-Based IP Flow Record Query Language &amp;#8594;&lt;/a&gt;&lt;br /&gt;&lt;a href='http://cnds.eecs.jacobs-university.de/slides/2010-aims-flowy-implementation.pdf'&gt;Slides &amp;#8594;&lt;/a&gt; &lt;br /&gt;Kaloyan Kanev, Nikolay Melnikov, Jürgen Schönwälder&lt;br /&gt;AIMS 2010, Zurich, June 2010.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://svn.eecs.jacobs-university.de/svn/eecs/archive/bsc-2010/vperelman.pdf'&gt;Flow Signatures of Popular Applications &amp;#8594;&lt;/a&gt;&lt;br /&gt;Vladislav Perelman, Bachelors Thesis, May 2010.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://svn.eecs.jacobs-university.de/svn/eecs/archive/bsc-2010/pnemeth.pdf'&gt;Flowy improvement using MapReduce &amp;#8594;&lt;/a&gt;&lt;br /&gt;Peter Nemeth, Bachelors Thesis, May 2010.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.springerlink.com/content/j4555jj848l8q862/fulltext.pdf'&gt;Design of a Stream-Based IP Flow Record Query Language &amp;#8594;&lt;/a&gt; &lt;br /&gt;&lt;a href='http://cnds.eecs.jacobs-university.de/slides/2009-dsom-flow-query.pdf'&gt;Slides &amp;#8594;&lt;/a&gt;&lt;br /&gt;Vladislav Marinov, Jürgen Schönwälder&lt;br /&gt;DSOM 2009, Venice, October 2009.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://svn.eecs.jacobs-university.de/svn/eecs/archive/msc-2009/kkanev.pdf'&gt;Flowy - Network Flow Analysis Application &amp;#8594;&lt;/a&gt;&lt;br /&gt;Kaloyan Kanev, Masters Thesis, August 2009.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://svn.eecs.jacobs-university.de/svn/eecs/archive/msc-2009/vmarinov.pdf'&gt;Design of an IP Flow Record Query Language &amp;#8594;&lt;/a&gt;&lt;br /&gt;Vladislav Marinov, Masters Thesis, August 2009.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.springerlink.com/content/0m76rk7653872426/fulltext.pdf'&gt;Design of an IP Flow Record Query Language &amp;#8594;&lt;/a&gt;&lt;br /&gt;Vladislav Marinov, Jürgen Schönwälder&lt;br /&gt;AIMS 2008, Bremen, July 2008.&lt;/p&gt;</content>
 </entry>
 
 
</feed>